import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixRLSIssue() {
  try {
    console.log('üîß Correction du probl√®me RLS...');

    // 1. Supprimer toutes les politiques existantes
    console.log('Suppression des politiques existantes...');
    const policies = [
      'Users can view own profile',
      'Users can update own profile',
      'Users can insert own profile',
      'Admins can view all profiles',
      'Admins can manage all profiles',
      'Users can manage their own profile',
      'Admins have full access to profiles',
      'Allow read access to all authenticated users',
      'users_can_manage_own_profile',
      'authenticated_users_can_view_profiles',
      'users_can_insert_own_profile'
    ];

    for (const policy of policies) {
      try {
        await supabase.rpc('exec_sql', {
          sql: `DROP POLICY IF EXISTS "${policy}" ON public.profiles;`
        });
        console.log(`‚úÖ Politique "${policy}" supprim√©e`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Erreur lors de la suppression de "${policy}":`, error.message);
      }
    }

    // 2. Supprimer la fonction probl√©matique
    console.log('Suppression de la fonction is_current_user_admin...');
    try {
      await supabase.rpc('exec_sql', {
        sql: 'DROP FUNCTION IF EXISTS public.is_current_user_admin();'
      });
      console.log('‚úÖ Fonction supprim√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la suppression de la fonction:', error.message);
    }

    // 3. D√©sactiver RLS temporairement
    console.log('D√©sactivation de RLS sur la table profiles...');
    try {
      await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE public.profiles DISABLE ROW LEVEL SECURITY;'
      });
      console.log('‚úÖ RLS d√©sactiv√©');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©sactivation de RLS:', error.message);
    }

    // 4. Cr√©er une politique simple pour les utilisateurs authentifi√©s
    console.log('Cr√©ation d\'une politique simple...');
    try {
      await supabase.rpc('exec_sql', {
        sql: `
          ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
          CREATE POLICY "simple_authenticated_access" ON public.profiles
          FOR ALL
          USING (auth.role() = 'authenticated')
          WITH CHECK (auth.role() = 'authenticated');
        `
      });
      console.log('‚úÖ Politique simple cr√©√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la cr√©ation de la politique:', error.message);
    }

    console.log('üéâ Correction RLS termin√©e !');

    // 5. Test de la correction
    console.log('Test de la correction...');
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('count')
        .limit(1);

      if (error) {
        console.log('‚ùå Erreur lors du test:', error.message);
      } else {
        console.log('‚úÖ Test r√©ussi - RLS fonctionne correctement');
      }
    } catch (error) {
      console.log('‚ùå Erreur lors du test:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction RLS:', error);
  }
}

fixRLSIssue();
