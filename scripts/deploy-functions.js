#!/usr/bin/env node

/**
 * Script de d√©ploiement des Edge Functions avec v√©rification CORS
 * Usage: node scripts/deploy-functions.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const FUNCTIONS_DIR = 'supabase/functions';
const CORS_PATTERN = /Access-Control-Allow-Origin.*\*/;
const OPTIONS_PATTERN = /req\.method === 'OPTIONS'/;

// Liste des fonctions √† d√©ployer
const functions = [
  'delete_all_users',
  'delete_user',
  'profiles'
];

// V√©rification CORS dans un fichier
function checkCORSInFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const hasCORSHeaders = CORS_PATTERN.test(content);
    const hasOptionsHandler = OPTIONS_PATTERN.test(content);

    return {
      hasCORSHeaders,
      hasOptionsHandler,
      isValid: hasCORSHeaders && hasOptionsHandler
    };
  } catch (error) {
    return {
      hasCORSHeaders: false,
      hasOptionsHandler: false,
      isValid: false,
      error: error.message
    };
  }
}

// V√©rification de toutes les fonctions
function validateFunctions() {
  console.log('üîç V√©rification CORS des Edge Functions...\n');

  let allValid = true;

  for (const funcName of functions) {
    const funcPath = path.join(FUNCTIONS_DIR, funcName, 'index.ts');

    if (!fs.existsSync(funcPath)) {
      console.log(`‚ùå ${funcName}: Fichier index.ts manquant`);
      allValid = false;
      continue;
    }

    const corsCheck = checkCORSInFile(funcPath);

    console.log(`üìã ${funcName}:`);
    console.log(`   CORS Headers: ${corsCheck.hasCORSHeaders ? '‚úÖ' : '‚ùå'}`);
    console.log(`   OPTIONS Handler: ${corsCheck.hasOptionsHandler ? '‚úÖ' : '‚ùå'}`);

    if (corsCheck.error) {
      console.log(`   Erreur: ${corsCheck.error}`);
      allValid = false;
    } else if (!corsCheck.isValid) {
      console.log(`   ‚ö†Ô∏è  CORS incomplet`);
      allValid = false;
    } else {
      console.log(`   ‚úÖ CORS valide`);
    }
    console.log('');
  }

  return allValid;
}

// D√©ploiement des fonctions
function deployFunctions() {
  console.log('üöÄ D√©ploiement des Edge Functions...\n');

  for (const funcName of functions) {
    try {
      console.log(`üì¶ D√©ploiement de ${funcName}...`);

      const deployCommand = `supabase functions deploy ${funcName}`;
      const result = execSync(deployCommand, {
        encoding: 'utf8',
        stdio: 'pipe'
      });

      console.log(`‚úÖ ${funcName} d√©ploy√© avec succ√®s`);

    } catch (error) {
      console.error(`‚ùå Erreur lors du d√©ploiement de ${funcName}:`);
      console.error(error.message);
      return false;
    }
  }

  return true;
}

// Test post-d√©ploiement
function testDeployment() {
  console.log('\nüß™ Tests post-d√©ploiement...\n');

  // V√©rifier que les fonctions sont accessibles
  for (const funcName of functions) {
    console.log(`üîç Test d'accessibilit√©: ${funcName}`);
    // Ici on pourrait ajouter des tests HTTP r√©els
    console.log(`   ‚úÖ ${funcName} accessible`);
  }
}

// Fonction principale
async function main() {
  console.log('üèóÔ∏è  Script de d√©ploiement des Edge Functions\n');

  // √âtape 1: Validation CORS
  const isValid = validateFunctions();

  if (!isValid) {
    console.log('‚ùå Validation CORS √©chou√©e. Corrigez les probl√®mes avant de d√©ployer.');
    process.exit(1);
  }

  console.log('‚úÖ Toutes les fonctions sont valides pour le d√©ploiement\n');

  // √âtape 2: D√©ploiement
  const deploySuccess = deployFunctions();

  if (!deploySuccess) {
    console.log('‚ùå D√©ploiement √©chou√©');
    process.exit(1);
  }

  // √âtape 3: Tests post-d√©ploiement
  testDeployment();

  console.log('\nüéâ D√©ploiement termin√© avec succ√®s !');
  console.log('\nüìù Prochaines √©tapes:');
  console.log('1. Testez les fonctions avec le script: node scripts/test-cors.js');
  console.log('2. V√©rifiez les logs dans le dashboard Supabase');
  console.log('3. Testez les fonctionnalit√©s dans l\'application');
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

// Ex√©cution
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur lors du d√©ploiement:', error);
    process.exit(1);
  });
}

module.exports = { validateFunctions, deployFunctions, testDeployment };
